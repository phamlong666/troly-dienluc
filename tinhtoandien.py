
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io

st.set_page_config(page_title="Tr·ª£ l√Ω AI ƒêi·ªán l·ª±c ƒê·ªãnh H√≥a", layout="wide")
st.title(":zap: Tr·ª£ l√Ω AI - Ph√¢n t√≠ch t·ªïn th·∫•t ƒëi·ªán nƒÉng")
st.markdown("### Ph·ª•c v·ª• ƒêi·ªán l·ª±c ƒê·ªãnh H√≥a - EVNNPC")

uploaded_files = st.file_uploader(
    "T·∫£i l√™n c√°c file Excel t·ªïn th·∫•t (nhi·ªÅu th√°ng)", 
    type=["xlsx", "xls"], 
    accept_multiple_files=True
)

if uploaded_files:
    all_data = []
    for file in uploaded_files:
        try:
            df = pd.read_excel(file, skiprows=6)
            df["T√™n file"] = file.name
            all_data.append(df)
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file {file.name}: {str(e)}")

    if not all_data:
        st.warning("Kh√¥ng c√≥ file h·ª£p l·ªá ƒë·ªÉ x·ª≠ l√Ω.")
        st.stop()

    df_all = pd.concat(all_data, ignore_index=True)

    # Hi·ªÉn th·ªã c√°c c·ªôt n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c c·ªôt t·ªïn th·∫•t
    tonthat_col = None
    for col in df_all.columns:
        if "t·ªïn" in str(col).lower():
            tonthat_col = col
            break

    if not tonthat_col:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt t·ªïn th·∫•t trong d·ªØ li·ªáu.")
        with st.expander("üìã Danh s√°ch c·ªôt hi·ªán c√≥ trong d·ªØ li·ªáu:"):
            st.write(df_all.columns.tolist())
        st.stop()

    df_all[tonthat_col] = pd.to_numeric(df_all[tonthat_col], errors="coerce")

    name_cols = [col for col in df_all.columns if "tr·∫°m" in str(col).lower()]
    ten_col = name_cols[0] if name_cols else df_all.columns[0]

    thang_cols = [col for col in df_all.columns if "th√°ng" in str(col).lower() or "file" in str(col).lower()]
    thang_col = thang_cols[0] if thang_cols else "T√™n file"

    st.sidebar.markdown("## üîé B·ªô l·ªçc d·ªØ li·ªáu")

    if ten_col not in df_all.columns or df_all[ten_col].dropna().empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu t√™n tr·∫°m h·ª£p l·ªá.")
        st.stop()

    if thang_col not in df_all.columns or df_all[thang_col].dropna().empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu Th√°ng/NƒÉm h·ª£p l·ªá.")
        st.stop()

    selected_tba = st.sidebar.selectbox("Ch·ªçn tr·∫°m bi·∫øn √°p", sorted(df_all[ten_col].dropna().unique()))
    selected_month = st.sidebar.selectbox("Ch·ªçn Th√°ng/NƒÉm", sorted(df_all[thang_col].dropna().unique()))

    df_filtered = df_all[
        (df_all[ten_col] == selected_tba) & 
        (df_all[thang_col] == selected_month)
    ]

    if df_filtered.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc.")
        st.stop()

    st.markdown("### üìä Ph√¢n t√≠ch t·ªïn th·∫•t")
    df_filtered["Nguy√™n nh√¢n"] = st.text_input("Nh·∫≠p nguy√™n nh√¢n t·ªïn th·∫•t (ghi chung cho d√≤ng n√†y):", "")
    st.dataframe(df_filtered[[ten_col, thang_col, tonthat_col, "Nguy√™n nh√¢n"]])

    avg = df_filtered[tonthat_col].mean()
    st.metric("T·ªïn th·∫•t trung b√¨nh (%)", f"{avg:.2f}")

    fig, ax = plt.subplots()
    df_filtered[tonthat_col].dropna().plot(kind="bar", ax=ax, color="orange")
    ax.set_title("Bi·ªÉu ƒë·ªì t·ªïn th·∫•t")
    ax.set_ylabel("% t·ªïn th·∫•t")
    st.pyplot(fig)

    def create_excel():
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            df_filtered.to_excel(writer, index=False, sheet_name="TonThat")
        return output.getvalue()

    st.download_button(
        "üì• Xu·∫•t b√°o c√°o Excel",
        data=create_excel(),
        file_name=f"BaoCao_TonThat_{selected_tba}_{selected_month}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
